module alu(
    input [3:0] a, b,
    input en,
    input [2:0] opcod,
    output reg [4:0] result,
    output reg ack
);

always @(a, b, en, opcod) begin
    if (en == 1'b0) begin
        result = 5'b0;
        ack = 1'b0;
    end else begin
        case (opcod)
            3'b001: result = a - b;
            3'b010: result = a + b;
            3'b011: result = a & b;
            3'b100: result = a | b;
            3'b101: result = ~a;
            3'b110: result = a ^ b;
            3'b111: result = a << 1; // shift left by 1 bit means multiply by 2 raise to 1...
            default: result = 5'b0;
        endcase
        ack = 1'b1;
    end
end

endmodule
